{
	"name": "Weather_Bronze_Preprocessing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json2ADLSforWeatherData",
						"type": "DatasetReference"
					},
					"name": "weathersource"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "flatten1",
					"description": "Unrolling arrays from  to  with columns "
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          message as string,",
				"          cod as string,",
				"          city_id as integer,",
				"          calctime as double,",
				"          cnt as integer,",
				"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['containerhw1/bronze/weatherdata/*.json']) ~> weathersource",
				"weathersource foldDown(unroll(),",
				"     mapColumn(",
				"          message,",
				"          cod,",
				"          city_id,",
				"          calctime,",
				"          cnt,",
				"          timestamp = list.dt,",
				"          clouds_all = list.clouds.all,",
				"          feels_like = list.main.feels_like,",
				"          humidity = list.main.humidity,",
				"          pressure = list.main.pressure,",
				"          temp = list.main.temp,",
				"          temp_max = list.main.temp_max,",
				"          temp_min = list.main.temp_min,",
				"          description = list.weather.description,",
				"          icon = list.weather.icon,",
				"          id = list.weather.id,",
				"          main = list.weather.main,",
				"          deg = list.wind.deg,",
				"          speed = list.wind.speed",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(correcred_timestamp = iif(length(toString(timestamp)) == 10, timestamp, null())\r",
				") ~> derivedColumn1"
			]
		}
	}
}